Dive Into Python - Chapter 3 - Brian Mascitello

Chapter 3. Native Datatypes

Dictionaries, tuples, lists.

*** Dictionaries ***

Dictionary is a one-to-one relationship between keys and values.
Like hash tables in Perl and A dictionary in Python and like the Hashtable class in Java.

# Example 3.1. Defining a Dictionary (tried in IPython) ##############################################

In [1]: d = {"server":"mpilgrim", "database":"master"}

In [2]: d
Out[2]: {'database': 'master', 'server': 'mpilgrim'}

In [3]: d["server"]
Out[3]: 'mpilgrim'

In [4]: d["database"]
Out[4]: 'master'

In [5]: d["mpilgrim"]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-5-55e1c8e1e8e7> in <module>()
----> 1 d["mpilgrim"]

KeyError: 'mpilgrim'

######################################################################################################

You can modify a dictionary

>>> d["database"] = "pubs"
>>> d
{'server': 'mpilgrim', 'database': 'pubs'}

No duplicate keys in a dictionary.

You can add new key pairs to dictionary.

Dictionary Keys Are Case-Sensitive.

Dictionary values can be any datatype, including strings, integers, objects, or even other
dictionaries.

Dictionaries have no concept of order among elements. It is incorrect to say that the elements are
"out of order"; they are simply unordered.

del d["database"] would remove the database entry from the list.

d.clear() would remove everything from d

*** Lists ***

# Example 3.6. Defining a List ######################################################################

>>> li = ["a", "b", "mpilgrim", "z", "example"]
>>> li
['a', 'b', 'mpilgrim', 'z', 'example']
>>> li[0]
'a'
>>> li[4]
'example'

#####################################################################################################

Lists start at zero. End at length -1. Can use negative values to move backwards through list.
li[-1]is the last element of the list li

Subset of the initial list (called a slice) by specifying two indices in the list.

# Example 3.8-10. Slicing a List #######################################################################

>>> li
['a', 'b', 'mpilgrim', 'z', 'example']

>>> li[1:3]
['b', 'mpilgrim']

>>> li[1:-1]
['b', 'mpilgrim', 'z']

>>> li[0:3]
['a', 'b', 'mpilgrim']

>>> li[:3]
['a', 'b', 'mpilgrim']

>>> li[3:]
['z', 'example']

>>> li[:]
['a', 'b', 'mpilgrim', 'z', 'example']

>>> li
['a', 'b', 'mpilgrim', 'z', 'example']

>>> li.append("new")

>>> li
['a', 'b', 'mpilgrim', 'z', 'example', 'new']

>>> li.insert(2, "new")

>>> li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new']

>>> li.extend(["two", "elements"])

>>> li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']

#####################################################################################################

# Example 3.11. The Difference between extend and append ############################################

>>> li = ['a', 'b', 'c']
>>> li.extend(['d', 'e', 'f'])
>>> li
['a', 'b', 'c', 'd', 'e', 'f']
>>> len(li)
6
>>> li[-1]
'f'
>>> li = ['a', 'b', 'c']
>>> li.append(['d', 'e', 'f'])
>>> li
['a', 'b', 'c', ['d', 'e', 'f']]
>>> len(li)
4
>>> li[-1]
['d', 'e', 'f']

#####################################################################################################

extend takes a single argument, which is always a list, and adds each of the
elements of that list to the original list.

append takes one argument, which can be any data type, and simply adds it to the
end of the list.

# Example 3.13. Removing Elements from a List #######################################################

>>> li
['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']
>>> li.remove("z")
>>> li
['a', 'b', 'new', 'mpilgrim', 'example', 'new', 'two', 'elements']
>>> li.remove("new")
Dive Into Python 20
>>> li
['a', 'b', 'mpilgrim', 'example', 'new', 'two', 'elements']
>>> li.remove("c")
Traceback (innermost last):
File "<interactive input>", line 1, in ?
ValueError: list.remove(x): x not in list
>>> li.pop()
'elements'
>>> li
['a', 'b', 'mpilgrim', 'example', 'new', 'two']

#####################################################################################################

remove removes the first occurrence of a value from a list.

remove removes only the first occurrence of a value. In this case, 'new' appeared twice in the list, but
li.remove("new") removed only the first occurrence.

If the value is not found in the list, Python raises an exception. This mirrors the behavior of the index method.

pop is an interesting beast. It does two things: it removes the last element of the list, and it returns the value
that it removed. Note that this is different from li[-1], which returns a value but does not change the list, and
different from li.remove(value), which changes the list but does not return a value.

# Example 3.14. List Operators ######################################################################

>>> li = ['a', 'b', 'mpilgrim']
>>> li = li + ['example', 'new']
>>> li
['a', 'b', 'mpilgrim', 'example', 'new']
>>> li += ['two']
>>> li
['a', 'b', 'mpilgrim', 'example', 'new', 'two']
>>> li = [1, 2] * 3
>>> li
[1, 2, 1, 2, 1, 2]

#####################################################################################################